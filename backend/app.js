/**
 * @file: app.js
 * @description: ะัะฝะพะฒะฝะพะต ะฟัะธะปะพะถะตะฝะธะต Express ั API ะดะปั ัะฐะฑะพัั ั PDF ัะฐะฑะปะพะฝะฐะผะธ
 * @dependencies: express, cors, dotenv, routes
 * @created: 2025-01-13
 */

import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';
import routes from './src/api/routes.js';

// ะะฐะณััะถะฐะตะผ ะฟะตัะตะผะตะฝะฝัะต ะพะบััะถะตะฝะธั
dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors({
  origin: process.env.CORS_ORIGIN || 'http://localhost:3000',
  credentials: true
}));

app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// ะกัะฐัะธัะตัะบะธะต ัะฐะนะปั
app.use(express.static(path.join(__dirname, '../public')));

// API ะผะฐัััััั
app.use('/api', routes);

// ะะฑัะฐะฑะพัะบะฐ ะพัะธะฑะพะบ
app.use((error, req, res, next) => {
  console.error('ะัะธะฑะบะฐ ัะตัะฒะตัะฐ:', error);
  
  if (error.code === 'LIMIT_FILE_SIZE') {
    return res.status(400).json({
      code: 'FILE_TOO_LARGE',
      message: 'ะคะฐะนะป ัะปะธัะบะพะผ ะฑะพะปััะพะน (ะผะฐะบัะธะผัะผ 10MB)'
    });
  }
  
  res.status(500).json({
    code: 'INTERNAL_ERROR',
    message: 'ะะฝัััะตะฝะฝัั ะพัะธะฑะบะฐ ัะตัะฒะตัะฐ'
  });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    code: 'NOT_FOUND',
    message: 'ะญะฝะดะฟะพะธะฝั ะฝะต ะฝะฐะนะดะตะฝ'
  });
});

// ะะฐะฟััะบ ัะตัะฒะตัะฐ
app.listen(PORT, () => {
  console.log(`๐ ะกะตัะฒะตั ะทะฐะฟััะตะฝ ะฝะฐ ะฟะพััั ${PORT}`);
  console.log(`๐ ะกัะฐัะธัะตัะบะธะต ัะฐะนะปั: ${path.join(__dirname, '../public')}`);
  console.log(`๐ง API: http://localhost:${PORT}/api`);
});

export default app;
