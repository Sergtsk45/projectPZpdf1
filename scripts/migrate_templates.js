#!/usr/bin/env node
/**
 * @file: scripts/migrate_templates.js
 * @description: –ú–∏–≥—Ä–∞—Ü–∏—è PDF —à–∞–±–ª–æ–Ω–æ–≤ –≤ backend/storage/templates –∫ —Å—Ö–µ–º–µ template_<templateId>.pdf
 * - –ù–∞—Ö–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –ø–æ SHA256 (templateId) –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –∏—Ö
 * - –î–æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç –ø–æ–ª–µ storageFileName, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
 * - –í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ –∏—Ç–æ–≥–∞–º
 */

import fs from 'fs/promises';
import path from 'path';
import crypto from 'crypto';

const ROOT = process.cwd();
const MANIFESTS_DIR = path.join(ROOT, 'backend/storage/manifests');
const TEMPLATES_DIR = path.join(ROOT, 'backend/storage/templates');

async function sha256(filePath) {
  const data = await fs.readFile(filePath);
  return crypto.createHash('sha256').update(data).digest('hex');
}

async function buildHashIndex() {
  const files = await fs.readdir(TEMPLATES_DIR);
  const pdfs = files.filter(f => f.toLowerCase().endsWith('.pdf'));
  const map = new Map();
  for (const f of pdfs) {
    const full = path.join(TEMPLATES_DIR, f);
    try {
      const hash = await sha256(full);
      map.set(hash, f);
    } catch (e) {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å ${f}: ${e.message}`);
    }
  }
  return map;
}

async function migrate() {
  console.log('üîß –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤...');
  await fs.mkdir(MANIFESTS_DIR, { recursive: true });
  await fs.mkdir(TEMPLATES_DIR, { recursive: true });

  const hashIndex = await buildHashIndex();
  const manifestFiles = (await fs.readdir(MANIFESTS_DIR)).filter(f => f.endsWith('.json'));

  let updatedManifests = 0;
  let renamedFiles = 0;
  let warnings = 0;

  for (const mf of manifestFiles) {
    const mPath = path.join(MANIFESTS_DIR, mf);
    try {
      const raw = await fs.readFile(mPath, 'utf8');
      const manifest = JSON.parse(raw);
      const { templateId } = manifest;
      if (!templateId) {
        console.warn(`‚ö†Ô∏è –ú–∞–Ω–∏—Ñ–µ—Å—Ç –±–µ–∑ templateId: ${mf}`);
        warnings++;
        continue;
      }

      const expectedName = `template_${templateId}.pdf`;
      const currentName = hashIndex.get(templateId);

      if (currentName) {
        if (currentName !== expectedName) {
          await fs.rename(path.join(TEMPLATES_DIR, currentName), path.join(TEMPLATES_DIR, expectedName));
          console.log(`‚ú≥Ô∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: ${currentName} ‚Üí ${expectedName}`);
          renamedFiles++;
        }
      } else {
        console.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –¥–ª—è ${templateId} –≤ ${TEMPLATES_DIR}`);
        warnings++;
      }

      if (manifest.storageFileName !== expectedName) {
        manifest.storageFileName = expectedName;
        await fs.writeFile(mPath, JSON.stringify(manifest, null, 2));
        updatedManifests++;
      }
    } catch (e) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${mf}: ${e.message}`);
      warnings++;
    }
  }

  console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  console.log(`‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤: ${updatedManifests}`);
  console.log(`‚Ä¢ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${renamedFiles}`);
  console.log(`‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${warnings}`);
}

migrate().catch(err => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', err);
  process.exit(1);
});

