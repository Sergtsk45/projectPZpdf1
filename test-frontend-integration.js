/**
 * @file: test-frontend-integration.js
 * @description: –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ frontend + backend
 * @dependencies: node-fetch, fs
 * @created: 2025-01-13
 */

import fetch from 'node-fetch';
import fs from 'fs/promises';

const API_BASE = 'http://localhost:3000/api';
const TEST_TEMPLATE = 'pattern1.pdf';

async function testFullWorkflow() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ workflow...\n');
  
  try {
    // 1. –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞
    console.log('1Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω...');
    const templateBuffer = await fs.readFile(TEST_TEMPLATE);
    
    const formData = new FormData();
    formData.append('file', new Blob([templateBuffer], { type: 'application/pdf' }), TEST_TEMPLATE);
    
    const uploadResponse = await fetch(`${API_BASE}/templates`, {
      method: 'POST',
      body: formData
    });
    
    if (!uploadResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${uploadResponse.status}`);
    }
    
    const uploadResult = await uploadResponse.json();
    const templateId = uploadResult.templateId;
    console.log('‚úÖ –®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω:', templateId);
    console.log('üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π:', uploadResult.manifest.fields.length);
    
    // 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    console.log('\n2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
    const testValues = {
      msr_daily: '150 –º3/—á–∞—Å',
      pump_model: '–ù–∞—Å–æ—Å X-200',
      project_code: 'PZ-001',
      max_hourly: '45 –º3/—á–∞—Å',
      msr_secondly: '12.5 –ª/—Å'
    };
    
    const generateResponse = await fetch(`${API_BASE}/generate`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        templateId,
        values: testValues,
        options: {
          fontSize: 10,
          gap: 6
        }
      })
    });
    
    if (!generateResponse.ok) {
      const errorText = await generateResponse.text();
      throw new Error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${generateResponse.status} - ${errorText}`);
    }
    
    const pdfBuffer = await generateResponse.arrayBuffer();
    const outputPath = 'test-frontend-integration.pdf';
    await fs.writeFile(outputPath, Buffer.from(pdfBuffer));
    
    console.log('‚úÖ PDF —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', outputPath, `(${pdfBuffer.byteLength} –±–∞–π—Ç)`);
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å frontend
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º frontend...');
    const frontendResponse = await fetch('http://localhost:3000/');
    
    if (!frontendResponse.ok) {
      throw new Error(`Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${frontendResponse.status}`);
    }
    
    const frontendHtml = await frontendResponse.text();
    if (frontendHtml.includes('–ó–∞–≥—Ä—É–∑–∫–∞ PDF —à–∞–±–ª–æ–Ω–∞')) {
      console.log('‚úÖ Frontend –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω');
    } else {
      console.log('‚ö†Ô∏è Frontend –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω');
    }
    
    console.log('\nüéâ –ü–æ–ª–Ω—ã–π workflow —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    console.log('\nüìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    console.log('2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ pattern1.pdf –∫–∞–∫ —à–∞–±–ª–æ–Ω');
    console.log('3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ PDF');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testFullWorkflow();

