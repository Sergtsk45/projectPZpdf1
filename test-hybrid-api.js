/**
 * @file: test-hybrid-api.js
 * @description: –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ API
 * @dependencies: node-fetch, fs, path
 * @created: 2025-01-13
 */

import fetch from 'node-fetch';
import fs from 'fs/promises';
import path from 'path';

const API_BASE = 'http://localhost:3000/api';
const TEST_TEMPLATE = 'pattern1.pdf';

async function testAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ API...\n');
  
  try {
    // 1. –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —à–∞–±–ª–æ–Ω–∞...');
    const templateBuffer = await fs.readFile(TEST_TEMPLATE);
    
    const formData = new FormData();
    formData.append('file', new Blob([templateBuffer], { type: 'application/pdf' }), TEST_TEMPLATE);
    
    const uploadResponse = await fetch(`${API_BASE}/templates`, {
      method: 'POST',
      body: formData
    });
    
    if (!uploadResponse.ok) {
      const errorText = await uploadResponse.text();
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${uploadResponse.status} ${uploadResponse.statusText} - ${errorText}`);
    }
    
    const uploadResult = await uploadResponse.json();
    console.log('‚úÖ –®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω:', uploadResult.templateId);
    console.log('üìã –ú–∞–Ω–∏—Ñ–µ—Å—Ç:', JSON.stringify(uploadResult.manifest, null, 2));
    
    const templateId = uploadResult.templateId;
    
    // 2. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞...');
    const manifestResponse = await fetch(`${API_BASE}/templates/${templateId}/manifest`);
    
    if (!manifestResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: ${manifestResponse.status}`);
    }
    
    const manifestResult = await manifestResponse.json();
    console.log('‚úÖ –ú–∞–Ω–∏—Ñ–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω:', manifestResult.manifest.fields.length, '–ø–æ–ª–µ–π');
    
    // 3. –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF...');
    const testValues = {
      msr_daily: '150 m3/hour',
      pump_model: 'Pump X-200',
      project_code: 'PZ-001',
      max_hourly: '45 m3/hour',
      msr_secondly: '12.5 l/s'
    };
    
    const generateResponse = await fetch(`${API_BASE}/generate`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        templateId,
        values: testValues,
        options: {
          fontSize: 10,
          gap: 6
        }
      })
    });
    
    if (!generateResponse.ok) {
      const errorText = await generateResponse.text();
      throw new Error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${generateResponse.status} - ${errorText}`);
    }
    
    const pdfBuffer = await generateResponse.buffer();
    const outputPath = 'test-hybrid-output.pdf';
    await fs.writeFile(outputPath, pdfBuffer);
    
    console.log('‚úÖ PDF —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', outputPath, `(${pdfBuffer.length} –±–∞–π—Ç)`);
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ PDF
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ PDF...');
    const pdfText = await extractTextFromPDF(pdfBuffer);
    console.log('üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', pdfText.substring(0, 200) + '...');
    
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    process.exit(1);
  }
}

async function extractTextFromPDF(pdfBuffer) {
  try {
    const { PDFDocument } = await import('pdf-lib');
    const pdfDoc = await PDFDocument.load(pdfBuffer);
    const pages = pdfDoc.getPages();
    
    let text = '';
    for (const page of pages) {
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ pdf-lib
      text += `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pages.indexOf(page) + 1}: ${page.getWidth()}x${page.getHeight()}\n`;
    }
    
    return text;
  } catch (error) {
    return `–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: ${error.message}`;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testAPI();
